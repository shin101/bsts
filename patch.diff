diff --git a/binary-search-tree.js b/binary-search-tree.js
index 582b6d5..12065b0 100644
--- a/binary-search-tree.js
+++ b/binary-search-tree.js
@@ -21,7 +21,7 @@ class BinarySearchTree {
     };
 
     let currentNode = this.root;
-    while (true){
+    while (currentNode) {
       if(val < currentNode.val){
         if(currentNode.left === null){
           currentNode.left = new Node(val);
@@ -34,10 +34,10 @@ class BinarySearchTree {
           currentNode.right = new Node(val);
           return this;
         } else {
-          currentNode = currentNode.right.val;
+          currentNode = currentNode.right;
         }
       }
-      }
+    }
   }
 
   /** insertRecursively(val): insert a new node into the BST with value val.
@@ -110,22 +110,18 @@ class BinarySearchTree {
   /** dfsPreOrder(): Traverse the array using pre-order DFS.
    * Return an array of visited nodes. */
 
-  // dfsPreOrder() {
-  //   let output = [];
-  //   let current = this.root;
-  //   // traverse myself first then go left and right 
-  //   function traverse(node){
-  //     output.push(node.val);
-  //     node.left && traverse(node.left);
-  //     node.right && traverse(node.right);
-  //   }
-  //   traverse(current);
-  //   return output;
-  // }
-
-  // dfsPreOrder() {
-
-  // }
+  dfsPreOrder() {
+    let output = [];
+    let current = this.root;
+    // traverse myself first then go left and right 
+    function traverse(node) {
+      output.push(node.val);
+      node.left && traverse(node.left);
+      node.right && traverse(node.right);
+    }
+    traverse(current);
+    return output;
+  }
 
 
 
